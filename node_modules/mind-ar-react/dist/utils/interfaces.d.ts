import React from 'react';
import { Entity as _Entity, Scene as _Scene } from 'aframe-react-component/dist/utils/interface';
import { COMPILER_STATE } from './constant';
export declare type DefaultARProps = {
    autoStart?: boolean;
    uiLoading?: string;
    uiScanning?: string;
    uiError?: string;
    filterMinCF?: number;
    filterBeta?: number;
    shouldFaceUser?: boolean;
    _positionSettings?: string;
    _positionZIndex?: number;
};
export declare type MindARImage = DefaultARProps & {
    imageTargetSrc: string;
    maxTrack?: number;
    missTolerance?: number;
    warmupTolerance?: number;
    showStats?: boolean;
    reshowScanning?: boolean;
};
export declare type MindARFace = DefaultARProps & {
    faceOccluder?: boolean;
};
export declare type Scene = _Scene & {
    'gesture-detector'?: boolean;
    'mouse-detector'?: boolean;
    mindARImage?: MindARImage;
    mindARFace?: MindARFace;
    children?: React.ReactNode;
    arEvents?: IAREvents[] | IAREvents;
};
export declare type GestureRotation = {
    enabled: boolean;
    rotationFactor: number;
};
export declare type GestureScale = {
    enabled: boolean;
    minScale: number;
    maxScale: number;
};
export declare type Marker = _Entity & {
    targetIndex: number;
};
export declare type Entity = _Entity & {
    'gesture-rotation'?: GestureRotation;
    'mouse-rotation'?: GestureRotation;
    'gesture-scale'?: GestureScale;
    'mouse-scale'?: GestureScale;
};
export declare type Faces = _Entity & {
    anchorIndex?: number;
};
export declare type IAREvents = {
    eventName: 'arReady' | 'arError' | 'targetFound' | 'targetLost';
    callbacks: (e: any) => void;
};
export declare type ReactSetter<T> = React.Dispatch<React.SetStateAction<T>>;
export declare type CompilerState = typeof COMPILER_STATE[keyof typeof COMPILER_STATE];
