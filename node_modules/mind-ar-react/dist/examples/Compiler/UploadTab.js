import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useCallback, useEffect, useMemo, useState } from 'react';
import { useDropzone } from 'react-dropzone';
import { acceptStyle, activeStyle, baseStyle, rejectStyle } from './styles';
const UploadTab = ({ onClick, percentage, }) => {
    const [files, setFiles] = useState([]);
    const onDrop = useCallback((acceptedFiles) => {
        const handleFile = (file) => Object.assign(file, {
            preview: URL.createObjectURL(file),
        });
        setFiles(acceptedFiles.map(handleFile));
    }, []);
    const { getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject } = useDropzone({
        onDrop,
    });
    const style = useMemo(() => ({
        ...baseStyle,
        ...(isDragActive ? activeStyle : {}),
        ...(isDragAccept ? acceptStyle : {}),
        ...(isDragReject ? rejectStyle : {}),
    }), [isDragActive, isDragReject, isDragAccept]);
    // Cleanup files when unmounting
    useEffect(() => {
        return () => {
            for (const file of files) {
                URL.revokeObjectURL(file.preview);
            }
        };
    }, [files]);
    const ImagePreview = () => (_jsx("div", { style: { marginTop: '25px', marginBottom: '25px' }, children: files.map((file) => (_jsx("div", { children: _jsx("img", { src: file.preview, alt: file.name, width: 'auto', height: '75%' }) }, file.name))) }));
    return (_jsxs(_Fragment, { children: [_jsxs("div", { ...getRootProps({ style }), children: [_jsx("input", { ...getInputProps() }), _jsx("div", { children: "Drag and drop your target images here." })] }), _jsx(ImagePreview, {}), percentage === null && _jsx("button", { onClick: () => onClick(files), children: "Start" }), percentage !== null && _jsxs("div", { children: ["Progress: ", percentage, " %"] })] }));
};
export default UploadTab;
