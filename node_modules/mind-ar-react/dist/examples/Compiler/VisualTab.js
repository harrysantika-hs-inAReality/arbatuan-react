import { jsxs as _jsxs, jsx as _jsx } from "react/jsx-runtime";
import { useCallback, useEffect, useMemo, createRef, useState } from 'react';
const VisualTab = ({ dataList, exportedBuffer, }) => {
    const canvasRef = createRef();
    const [targetIndex, setTargetIndex] = useState(0);
    const [keyframeIndex, setKeyframeIndex] = useState(0);
    const drawPoint = useCallback((ctx, color, centerX, centerY, radius = 1) => {
        ctx.beginPath();
        ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);
        ctx.fillStyle = color;
        ctx.lineWidth = 1;
        ctx.strokeStyle = color;
        ctx.stroke();
    }, []);
    useEffect(() => {
        if (dataList.length === 0)
            return;
        const targetImage = dataList[targetIndex].imageList[keyframeIndex];
        const matchingPoints = [
            ...dataList[targetIndex].matchingData[keyframeIndex].maximaPoints,
            ...dataList[targetIndex].matchingData[keyframeIndex].minimaPoints,
        ];
        const canvas = canvasRef.current;
        if (!canvas)
            return;
        canvas.width = targetImage.width;
        canvas.height = targetImage.height;
        const ctx = canvas.getContext('2d');
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        const tData = new Uint8ClampedArray(targetImage.width * targetImage.height * 4);
        for (let i = 0; i < targetImage.data.length; i++) {
            tData[i * 4 + 0] = targetImage.data[i];
            tData[i * 4 + 1] = targetImage.data[i];
            tData[i * 4 + 2] = targetImage.data[i];
            tData[i * 4 + 3] = 255;
        }
        const imageData = new ImageData(tData, targetImage.width, targetImage.height);
        ctx.putImageData(imageData, 0, 0);
        for (let i = 0; i < matchingPoints.length; i++) {
            const point = matchingPoints[i];
            drawPoint(ctx, '#ff0000', Math.round(point.x), Math.round(point.y), point.scale);
        }
    }, [dataList, targetIndex, keyframeIndex]);
    const numTargetRange = useMemo(() => dataList.map((data, index) => index), [dataList]);
    const numScaleRange = useMemo(() => dataList?.[targetIndex]?.imageList?.map((data, index) => index) ?? [], [dataList, targetIndex]);
    const canvasStyle = useMemo(() => {
        const width = 100 * (dataList?.[targetIndex]?.imageList?.[keyframeIndex]?.scale ?? 1);
        return {
            width: width * 0.95 + '%',
            maxHeight: '100%',
            top: (100 - width) / 2 + '%',
        };
    }, [dataList, targetIndex, keyframeIndex]);
    const downloadHandler = useCallback(() => {
        const blob = new Blob([exportedBuffer]);
        const aLink = document.createElement('a');
        aLink.download = 'targets.mind';
        aLink.href = URL.createObjectURL(blob);
        aLink.click();
        URL.revokeObjectURL(aLink.href);
    }, [exportedBuffer]);
    return (_jsxs("div", { style: { overflow: 'hidden', height: '100vh' }, children: [_jsxs("div", { style: {
                    display: 'flex',
                    flexDirection: 'column',
                    alignItems: 'center',
                }, children: [_jsx("ul", { role: "tablist", "aria-orientation": "horizontal", style: {
                            listStyleType: 'none',
                            display: 'flex',
                        }, children: numTargetRange.map((index) => (_jsxs("li", { role: "tab", onClick: () => {
                                setTargetIndex(index);
                                setKeyframeIndex(0);
                            }, style: {
                                padding: '0.5rem',
                                cursor: 'pointer',
                            }, children: ["Image ", index + 1] }, index))) }), _jsx("ul", { role: "tablist", "aria-orientation": "horizontal", style: {
                            listStyleType: 'none',
                            display: 'flex',
                        }, children: numScaleRange.map((index) => (_jsxs("li", { role: "tab", onClick: () => {
                                setKeyframeIndex(index);
                            }, style: {
                                margin: '0.5rem',
                                cursor: 'pointer',
                            }, children: ["Scale ", index + 1] }, index))) })] }), _jsx("div", { style: { height: '50%', overflow: 'auto', marginBottom: '20px' }, children: _jsx("div", { style: {
                        display: 'flex',
                        flexDirection: 'column',
                        alignItems: 'center',
                    }, children: _jsx("canvas", { style: canvasStyle, ref: canvasRef }) }) }), _jsx("button", { onClick: downloadHandler, children: "Download compiled" })] }));
};
export default VisualTab;
