import React from 'react';
import { ANIMATION_EASING } from './constant';
export declare type Vector2 = {
    x: number;
    y: number;
};
export declare type Vector3 = Vector2 & {
    z: number;
};
export declare type FlatVector2 = [number, number];
export declare type FlatVector3 = [number, number, number];
export declare type Animation = {
    property?: string;
    from?: Vector3 | FlatVector3 | string;
    to?: Vector3 | FlatVector3 | string;
    delay?: number;
    dir?: 'normal' | 'alternate' | 'reverse';
    dur?: number;
    easing?: typeof ANIMATION_EASING[keyof typeof ANIMATION_EASING];
    elasticity?: number;
    loop?: boolean;
    round?: boolean;
    autoplay?: boolean;
    enabled?: boolean;
};
export declare type Primitive = {
    color?: string;
    depth?: number;
    material?: string;
    position?: Vector3 | FlatVector3 | string;
    scale?: Vector3 | FlatVector3 | string;
    rotation?: Vector3 | FlatVector3 | string;
    animation?: Animation | Animation[];
    fog?: boolean;
    height?: number;
    metalness?: number;
    repeat?: Vector2 | FlatVector2 | string;
    roughness?: number;
    'segments-depth'?: number;
    'segments-height'?: number;
    'segments-width'?: number;
    shader?: string;
    src?: string;
    width?: number;
    visible?: boolean;
    type: string;
    children?: React.ReactNode;
    wireframe?: boolean;
    'wireframe-linewidth'?: number;
};
export declare type Rounded = {
    'theta-start'?: number;
    'theta-length'?: number;
};
export declare type Phis = {
    'phi-start'?: number;
    'phi-length'?: number;
};
export declare type Segments = {
    'segment-phi'?: number;
    'segment-theta'?: number;
};
export declare type Radiuses = {
    'radius-top'?: number;
    'radius-bottom'?: number;
};
export declare type BasePrimitive = Omit<Primitive, 'type'>;
export declare type Box = BasePrimitive;
export declare type Circle = BasePrimitive & Rounded & {
    radius: number;
    segments?: number;
};
export declare type Cone = BasePrimitive & Rounded & Radiuses & {
    'open-ended'?: boolean;
};
export declare type Cylinder = Cone;
export declare type CurvedImage = Omit<Image, 'options'> & Rounded & {
    opacity?: number;
    'open-ended'?: boolean;
    radius?: number;
    transparent?: boolean;
};
export declare type Dodecahedron = Box & Radiuses & Rounded & {
    'open-ended'?: boolean;
    'segment-radial'?: number;
};
export declare type Icosahedron = Omit<Dodecahedron, 'open-ended' | 'segment-radial'> & {
    radius?: number;
};
export declare type Octahedron = Icosahedron;
export declare type Tetrahedron = Icosahedron;
export declare type GLTFModel = Box;
export declare type Image = Omit<BasePrimitive, 'material'> & {
    options?: number;
    shader?: string;
    side?: string;
    transparent?: boolean;
};
export declare type Plane = Box;
export declare type Ring = Box & Rounded & Segments & {
    'radius-inner'?: number;
    'radius-outer'?: number;
};
export declare type Sky = Rounded & Phis & Pick<Box, 'color' | 'metalness' | 'repeat' | 'roughness' | 'segments-height' | 'segments-width' | 'shader' | 'src' | 'children'>;
export declare type Sphere = Circle & Phis;
export declare type Torus = Box & {
    arc?: number;
    radius?: number;
    'radius-tubular'?: number;
    'segment-radial'?: number;
    'segment-tubular'?: number;
};
export declare type TorusKnot = Torus & {
    p: number;
    q: number;
};
export declare type Triangle = Box & {
    'vertex-a'?: Vector3 | FlatVector3 | string;
    'vertex-b'?: Vector3 | FlatVector3 | string;
    'vertex-c'?: Vector3 | FlatVector3 | string;
};
export declare type Sound = {
    autoplay?: boolean;
    on?: string;
    src?: string;
    volume?: number;
};
export declare type Video = Omit<Image, 'options'> & {
    opacity?: number;
};
export declare type Entity = Box & {
    geometry?: string;
    'gltf-model'?: string;
};
export declare type Text = {
    align: 'left' | 'center' | 'right';
    'alpha-test': number;
    anchor: 'left' | 'center' | 'right' | 'align';
    baseline: 'top' | 'center' | 'bottom';
    color: string;
    font: string;
    'font-image': string;
    height: number;
    'letter-spacing': number;
    'line-height': number;
    opacity: number;
    rotation: Vector3 | FlatVector3 | string;
    shader: string;
    side: 'front' | 'back' | 'double';
    'tab-size': number;
    transparent: boolean;
    value: string;
    'white-space': 'normal' | 'pre' | 'nowrap';
    width: number;
    'wrap-count': number;
    'wrap-pixels': number;
    'z-offset': number;
    children?: React.ReactNode;
};
export declare type Camera = {
    position: Vector3 | FlatVector3 | string;
    'look-controls'?: boolean;
    active?: boolean;
};
export declare type Scene = {
    stats?: boolean;
    embedded?: boolean;
    orientationUI?: boolean;
    vrModeUI?: boolean;
    renderer?: string;
    children?: React.ReactNode;
    colorSpace?: string;
};
export declare type Assets = {
    timeout?: number;
    children: React.ReactNode;
};
export declare type AudioAsset = {
    id: string;
    src: string;
    autoplay?: boolean;
};
export declare type VideoAsset = AudioAsset;
export declare type Item = {
    id: string;
    'response-type'?: string;
    src: string;
};
